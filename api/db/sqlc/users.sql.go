// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createOrUpdateUser = `-- name: CreateOrUpdateUser :one
INSERT INTO users (
  email, name, join_year, profile_picture_url
) VALUES (
  $1, $2, $3, $4
) 
ON CONFLICT (email) DO UPDATE SET name = $2, profile_picture_url = $4
RETURNING email, name, join_year, profile_picture_url, hostel
`

type CreateOrUpdateUserParams struct {
	Email             string `json:"email"`
	Name              string `json:"name"`
	JoinYear          int32  `json:"joinYear"`
	ProfilePictureUrl string `json:"profilePictureUrl"`
}

func (q *Queries) CreateOrUpdateUser(ctx context.Context, arg CreateOrUpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateUser,
		arg.Email,
		arg.Name,
		arg.JoinYear,
		arg.ProfilePictureUrl,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Name,
		&i.JoinYear,
		&i.ProfilePictureUrl,
		&i.Hostel,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT email, name, join_year, profile_picture_url, hostel FROM users 
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.Name,
		&i.JoinYear,
		&i.ProfilePictureUrl,
		&i.Hostel,
	)
	return i, err
}

const updateHostel = `-- name: UpdateHostel :exec
UPDATE users SET hostel = $2 WHERE email = $1
`

type UpdateHostelParams struct {
	Email  string         `json:"email"`
	Hostel sql.NullString `json:"hostel"`
}

func (q *Queries) UpdateHostel(ctx context.Context, arg UpdateHostelParams) error {
	_, err := q.db.ExecContext(ctx, updateHostel, arg.Email, arg.Hostel)
	return err
}
